{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Ignite",
  "scopeName": "source.ignite",
  "fileTypes": ["ignite"],
  "patterns": [
    { "include": "#comments" },
    { "include": "#screen_declaration" },
    { "include": "#jsx_content" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.ignite",
          "begin": "//",
          "end": "$"
        },
        {
          "name": "comment.block.ignite",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "screen_declaration": {
      "name": "meta.screen.declaration.ignite",
      "begin": "^\\s*(screen)\\b",
      "beginCaptures": {
        "1": { "name": "keyword.control.screen.ignite" }
      },
      "end": "(?=<|$)",
      "patterns": [
        { "include": "#screen_attributes" }
      ]
    },
    "screen_attributes": {
      "patterns": [
        {
          "name": "meta.attribute.ignite",
          "begin": "\\b([a-zA-Z][a-zA-Z0-9_-]*)\\s*(=)",
          "beginCaptures": {
            "1": { "name": "entity.other.attribute-name.ignite" },
            "2": { "name": "punctuation.separator.key-value.ignite" }
          },
          "end": "(?=\\s+[a-zA-Z]|$|<)",
          "patterns": [
            { "include": "#attribute_values" }
          ]
        }
      ]
    },
    "jsx_content": {
      "patterns": [
        { "include": "#jsx_tag" },
        { "include": "#jsx_text" }
      ]
    },
    "jsx_tag": {
      "patterns": [
        { "include": "#jsx_self_closing_tag" },
        { "include": "#jsx_opening_tag" },
        { "include": "#jsx_closing_tag" }
      ]
    },
    "jsx_self_closing_tag": {
      "name": "meta.tag.jsx.ignite",
      "begin": "(<)([A-Z][a-zA-Z0-9]*)",
      "beginCaptures": {
        "1": { "name": "punctuation.definition.tag.begin.jsx.ignite" },
        "2": { "name": "entity.name.tag.jsx.ignite" }
      },
      "end": "(/)(>)",
      "endCaptures": {
        "1": { "name": "punctuation.definition.tag.end.jsx.ignite" },
        "2": { "name": "punctuation.definition.tag.end.jsx.ignite" }
      },
      "patterns": [
        { "include": "#jsx_attributes" }
      ]
    },
    "jsx_opening_tag": {
      "name": "meta.tag.jsx.ignite",
      "begin": "(<)([A-Z][a-zA-Z0-9]*)",
      "beginCaptures": {
        "1": { "name": "punctuation.definition.tag.begin.jsx.ignite" },
        "2": { "name": "entity.name.tag.jsx.ignite" }
      },
      "end": "(>)",
      "endCaptures": {
        "1": { "name": "punctuation.definition.tag.end.jsx.ignite" }
      },
      "patterns": [
        { "include": "#jsx_attributes" }
      ]
    },
    "jsx_closing_tag": {
      "name": "meta.tag.jsx.ignite",
      "match": "(<)(/)([A-Z][a-zA-Z0-9]*)(>)",
      "captures": {
        "1": { "name": "punctuation.definition.tag.begin.jsx.ignite" },
        "2": { "name": "punctuation.definition.tag.slash.jsx.ignite" },
        "3": { "name": "entity.name.tag.jsx.ignite" },
        "4": { "name": "punctuation.definition.tag.end.jsx.ignite" }
      }
    },
    "jsx_attributes": {
      "patterns": [
        {
          "name": "meta.attribute.jsx.ignite",
          "begin": "\\b([a-zA-Z][a-zA-Z0-9_-]*)\\s*(=)",
          "beginCaptures": {
            "1": { "name": "entity.other.attribute-name.jsx.ignite" },
            "2": { "name": "punctuation.separator.key-value.jsx.ignite" }
          },
          "end": "(?=[\\s/>])",
          "patterns": [
            { "include": "#attribute_values" }
          ]
        }
      ]
    },
    "attribute_values": {
      "patterns": [
        { "include": "#jsx_expression" },
        { "include": "#string_double_quoted" },
        { "include": "#string_single_quoted" },
        { "include": "#boolean_literal" },
        { "include": "#numeric_literal" },
        { "include": "#url_literal" },
        { "include": "#identifier" }
      ]
    },
    "jsx_expression": {
      "name": "meta.embedded.expression.jsx.ignite",
      "begin": "\\{",
      "beginCaptures": {
        "0": { "name": "punctuation.section.embedded.begin.jsx.ignite" }
      },
      "end": "\\}",
      "endCaptures": {
        "0": { "name": "punctuation.section.embedded.end.jsx.ignite" }
      },
      "patterns": [
        { "include": "#javascript_expression" }
      ]
    },
    "javascript_expression": {
      "patterns": [
        { "include": "#js_object" },
        { "include": "#js_array" },
        { "include": "#js_function_call" },
        { "include": "#js_property_access" },
        { "include": "#js_keywords" },
        { "include": "#js_operators" },
        { "include": "#string_double_quoted" },
        { "include": "#string_single_quoted" },
        { "include": "#template_literal" },
        { "include": "#numeric_literal" },
        { "include": "#boolean_literal" },
        { "include": "#null_undefined" },
        { "include": "#identifier" }
      ]
    },
    "js_object": {
      "name": "meta.object.literal.js.ignite",
      "begin": "\\{",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.block.begin.js.ignite" }
      },
      "end": "\\}",
      "endCaptures": {
        "0": { "name": "punctuation.definition.block.end.js.ignite" }
      },
      "patterns": [
        { "include": "#js_object_property" },
        { "include": "#javascript_expression" }
      ]
    },
    "js_object_property": {
      "patterns": [
        {
          "name": "meta.object.property.js.ignite",
          "begin": "([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*(:)",
          "beginCaptures": {
            "1": { "name": "variable.other.property.js.ignite" },
            "2": { "name": "punctuation.separator.key-value.js.ignite" }
          },
          "end": "(?=[,}])",
          "patterns": [
            { "include": "#javascript_expression" }
          ]
        }
      ]
    },
    "js_array": {
      "name": "meta.array.literal.js.ignite",
      "begin": "\\[",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.array.begin.js.ignite" }
      },
      "end": "\\]",
      "endCaptures": {
        "0": { "name": "punctuation.definition.array.end.js.ignite" }
      },
      "patterns": [
        { "include": "#javascript_expression" }
      ]
    },
    "js_function_call": {
      "name": "meta.function.call.js.ignite",
      "begin": "([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*(\\()",
      "beginCaptures": {
        "1": { "name": "entity.name.function.js.ignite" },
        "2": { "name": "punctuation.definition.parameters.begin.js.ignite" }
      },
      "end": "\\)",
      "endCaptures": {
        "0": { "name": "punctuation.definition.parameters.end.js.ignite" }
      },
      "patterns": [
        { "include": "#javascript_expression" }
      ]
    },
    "js_property_access": {
      "patterns": [
        {
          "name": "meta.property.access.js.ignite",
          "match": "([a-zA-Z_$][a-zA-Z0-9_$]*)(\\.)([a-zA-Z_$][a-zA-Z0-9_$]*)",
          "captures": {
            "1": { "name": "variable.other.object.js.ignite" },
            "2": { "name": "punctuation.accessor.js.ignite" },
            "3": { "name": "variable.other.property.js.ignite" }
          }
        }
      ]
    },
    "js_keywords": {
      "patterns": [
        {
          "name": "keyword.control.js.ignite",
          "match": "\\b(if|else|for|while|do|switch|case|default|break|continue|return|try|catch|finally|throw|new|delete|typeof|instanceof|in|of|var|let|const|function|class|extends|super|this|static|async|await)\\b"
        },
        {
          "name": "storage.type.js.ignite",
          "match": "\\b(var|let|const|function|class)\\b"
        }
      ]
    },
    "js_operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.js.ignite",
          "match": "(=|\\+=|\\-=|\\*=|/=|%=|\\*\\*=|<<=|>>=|>>>=|&=|\\|=|\\^=)"
        },
        {
          "name": "keyword.operator.comparison.js.ignite",
          "match": "(===|!==|==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.logical.js.ignite",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.arithmetic.js.ignite",
          "match": "(\\+|\\-|\\*|/|%|\\*\\*|\\+\\+|\\-\\-)"
        },
        {
          "name": "keyword.operator.bitwise.js.ignite",
          "match": "(&|\\||\\^|~|<<|>>|>>>)"
        },
        {
          "name": "keyword.operator.ternary.js.ignite",
          "match": "(\\?|:)"
        }
      ]
    },
    "jsx_text": {
      "patterns": [
        {
          "name": "text.jsx.ignite",
          "match": "(?<=>)[^<{]+(?=<|{|$)"
        }
      ]
    },
    "string_double_quoted": {
      "name": "string.quoted.double.ignite",
      "begin": "\"",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.string.begin.ignite" }
      },
      "end": "\"",
      "endCaptures": {
        "0": { "name": "punctuation.definition.string.end.ignite" }
      },
      "patterns": [
        { "include": "#string_escape" }
      ]
    },
    "string_single_quoted": {
      "name": "string.quoted.single.ignite",
      "begin": "'",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.string.begin.ignite" }
      },
      "end": "'",
      "endCaptures": {
        "0": { "name": "punctuation.definition.string.end.ignite" }
      },
      "patterns": [
        { "include": "#string_escape" }
      ]
    },
    "template_literal": {
      "name": "string.template.ignite",
      "begin": "`",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.string.template.begin.ignite" }
      },
      "end": "`",
      "endCaptures": {
        "0": { "name": "punctuation.definition.string.template.end.ignite" }
      },
      "patterns": [
        {
          "name": "meta.embedded.expression.template.ignite",
          "begin": "\\$\\{",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.template-expression.begin.ignite" }
          },
          "end": "\\}",
          "endCaptures": {
            "0": { "name": "punctuation.definition.template-expression.end.ignite" }
          },
          "patterns": [
            { "include": "#javascript_expression" }
          ]
        },
        { "include": "#string_escape" }
      ]
    },
    "string_escape": {
      "name": "constant.character.escape.ignite",
      "match": "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
    },
    "numeric_literal": {
      "patterns": [
        {
          "name": "constant.numeric.hex.ignite",
          "match": "\\b0[xX][0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.binary.ignite",
          "match": "\\b0[bB][01]+\\b"
        },
        {
          "name": "constant.numeric.octal.ignite",
          "match": "\\b0[oO][0-7]+\\b"
        },
        {
          "name": "constant.numeric.decimal.ignite",
          "match": "\\b([0-9]+\\.?[0-9]*([eE][+-]?[0-9]+)?|\\.[0-9]+([eE][+-]?[0-9]+)?)\\b"
        }
      ]
    },
    "boolean_literal": {
      "name": "constant.language.boolean.ignite",
      "match": "\\b(true|false)\\b"
    },
    "null_undefined": {
      "name": "constant.language.null.ignite",
      "match": "\\b(null|undefined)\\b"
    },
    "url_literal": {
      "name": "string.other.url.ignite",
      "match": "\\b(https?://[^\\s\"']+)\\b"
    },
    "identifier": {
      "name": "variable.other.readwrite.ignite",
      "match": "\\b[a-zA-Z_$][a-zA-Z0-9_$]*\\b"
    }
  }
}